#!/usr/bin/env python3

import os
import glob
import subprocess
from shutil import copy2 as copy

# define constants
CLOSURE_LIB_URL = "https://github.com/google/closure-library"
BLOCKY_DATA_DIR = os.path.dirname(os.path.realpath(__file__))
INSTALL_FILE = os.path.join(BLOCKY_DATA_DIR, 'install.dat')
DEV_BLOCKS_DIR = os.path.join(BLOCKY_DATA_DIR, 'blocks')
DEV_GENERATORS_DIR = os.path.join(BLOCKY_DATA_DIR, 'generators')
DIST_DIR = os.path.join(BLOCKY_DATA_DIR, 'dist')
OUT_DIR = os.path.join(BLOCKY_DATA_DIR, '..', 'data', 'public', 'blockly')
CLOSURE_DIR = os.path.join(BLOCKY_DATA_DIR, '..', 'data', 'public', 'closure-library')
BUILD_SCRIPT = os.path.join(OUT_DIR, 'build.py generators')


# files to install
files_to_install = {
  'blocks' : [
    f for f in subprocess.check_output(['find', DEV_BLOCKS_DIR, '-type', 'f']).decode("utf-8").split('\n')
    if len(f.strip()) > 1
  ],
  'generators' : [
    f for f in subprocess.check_output(['find', DEV_GENERATORS_DIR, '-type', 'f']).decode("utf-8").split('\n')
    if len(f.strip()) > 1
  ]
}

# files to remove
files_to_remove = []
if os.path.exists(INSTALL_FILE) and os.path.isfile(INSTALL_FILE):
  files_to_remove = [
    line.rstrip('\n')
    for line in open(INSTALL_FILE)
    if len(line.strip()) > 1
  ]
print('Files to remove:')
if len(files_to_remove) > 0:
  print('\t- ' + '\n\t- '.join( [os.path.relpath(f, os.path.join(OUT_DIR,'..')) for f in files_to_remove] ))
else:
  print('<none>')
print()

print('Files to copy:')
files_to_install_all = files_to_install['blocks'] + files_to_install['generators']
if len(files_to_install_all) > 0:
  print(
    '\t- ' + \
    '\n\t- '.join([
      os.path.relpath(f, BLOCKY_DATA_DIR)
      for f in files_to_install_all
    ])
  )
else:
  print('<none>')
print()

# remove files
for f in files_to_remove:
  print('Deleting: %s' % os.path.relpath(f, os.path.join(OUT_DIR,'..')))
  try:
    os.remove(f)
  except:
    pass
print()

# install new files
installed_files = []
for type, file_list in files_to_install.items():
  for f in file_list:
    dest_file = os.path.join(OUT_DIR, os.path.relpath(f, BLOCKY_DATA_DIR))
    dest_dir = os.path.dirname(dest_file)
    try:
      os.makedirs(dest_dir, 0o755)
    except:
      pass
    print('Copying: %s -> %s' % (
        os.path.relpath(f, BLOCKY_DATA_DIR),
        os.path.relpath(dest_file, os.path.join(OUT_DIR,'..'))
    ))
    copy(f, dest_file)
    installed_files.append( dest_file )
print()

# download closure-library
if not os.path.exists(CLOSURE_DIR):
  print('Library `closure-library` not found. Downloading...')
  subprocess.call(['git', 'clone', '--depth', '1', CLOSURE_LIB_URL, CLOSURE_DIR])
  print('Downloaded!')
print()

# write `install.dat` file
with open(INSTALL_FILE, 'w') as f:
  f.write("\n".join(installed_files))

# build
print('Building...')
subprocess.call(BUILD_SCRIPT, cwd=OUT_DIR, shell=True)

# copy blocks_compressed.js and javascript_compressed.js
blocks_compressed_f = os.path.join(OUT_DIR, 'blocks_compressed.js')
javascript_compressed_f = os.path.join(OUT_DIR, 'javascript_compressed.js')
blocks_compressed_dest = os.path.join(DIST_DIR, 'blocks_compressed.js')
javascript_compressed_dest = os.path.join(DIST_DIR, 'javascript_compressed.js')
if os.path.exists(blocks_compressed_dest):
  os.remove(blocks_compressed_dest)
if os.path.exists(javascript_compressed_dest):
  os.remove(javascript_compressed_dest)
copy(blocks_compressed_f, blocks_compressed_dest)
copy(javascript_compressed_f, javascript_compressed_dest)

# done
print('Done!')
